#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = Stream
Parser = SLR
#RegularDefinitions
prefixo: (i|f|b|s)_
#Tokens
	// equipe: Cristian Monster
		// Lucas de Farias Teixeira
		// Vinícius Gabriel de Souza


// lê e ignora caracteres de formatação
:[\s\t\n]

// símbolos especiais
"&&"
"||"
"!"
"=="
"!="
"<"
">"
"+"
"-"
"*"
"/"
","
";"
"="
"("
")"

palavra: [a-z] [a-zA-Z]*

// palavras reservadas

main = palavra: "main"
end = palavra: "end"
if = palavra: "if"
elif = palavra: "elif"
else = palavra: "else"
false = palavra: "false"
true = palavra: "true"
read = palavra: "read"
write = palavra: "write"
writeln = palavra: "writeln"
repeat = palavra: "repeat"
until = palavra: "until"
while = palavra: "while"


identificador:! {prefixo}([a-z][A-Z]?|[A-Z])([a-z0-9][A-Z]?)*

int: [0-9]|[1-9][0-9]*

float: ([0-9]|[1-9][0-9]*),([0-9]|[0-9]*[1-9])

string: \"([^%\n\"]|%x)*\"

// comentário de bloco
:! >@\n[^@]*\n@<
#NonTerminals
<main>

<lista_instrucoes>
<instrucao>
<declaracao_var>
<lista_comando>
<comando>
<lista_id>
<atribuicao>
<entrada>
<saida>
<selecao>
<repeticao>
<lista_entrada>
<opcional_string>
<lista_exp>
<expressao>
<opcional_elif>
<elif>
<opcional_else>
<repeat_comando>
#Grammar
<main> ::= main <lista_instrucoes> end ;

<lista_instrucoes> ::= <instrucao> | <instrucao> <lista_instrucoes> ;
<instrucao> ::= <declaracao_var> ";" | <comando> ";" ;
<declaracao_var> ::= <lista_id> ; 
<lista_id> ::= identificador | identificador "," <lista_id> ;
<lista_comando> ::= <comando> | <comando> <lista_comando> ;
<comando> ::=  <atribuicao> | <entrada> | <saida> | <selecao> | <repeticao> ; 

<atribuicao> ::= <lista_id> "=" <expressao> ;

<entrada> ::= read "(" <lista_entrada> ")" ;
<lista_entrada> ::= <opcional_string> <lista_id> | <opcional_string> <lista_id> ";" <lista_entrada> ;
<opcional_string> ::= string "," | î ;

<saida> ::= write "(" <lista_exp> ")" | writeln "(" <lista_exp> ")" ;
<lista_exp> ::= <expressao> | <expressao> "," <lista_exp> ;

<selecao> ::= if <expressao> <lista_comando> <opcional_elif> <opcional_else> end ;
<opcional_elif> ::= <elif> | <elif> <opcional_elif> | î ;
<elif> ::= elif <expressao> <lista_comando> ;
<opcional_else> ::= else <lista_comando> | î ;

<repeticao> ::= repeat <lista_comando> <repeat_comando> <expressao> ;
<repeat_comando> ::= while | until ;
